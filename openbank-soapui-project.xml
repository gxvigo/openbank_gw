<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="5442906d-3378-486d-9cbc-d15d6f8c7d28" activeEnvironment="Default" name="openbank" resourceRoot="" soapui-version="5.2.1" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormBase Path"/><con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormTarget Folder">/Users/giovanni/Downloads</con:setting><con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormFormat">json</con:setting><con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormAPI Version">1.0</con:setting><con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormSwagger Version">2.0</con:setting></con:settings><con:interface xsi:type="con:RestService" id="89b1de72-e399-4e40-8ed3-5deb5885d775" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://giovannis-mbp.nz.ibm.com:8080/</con:endpoint><con:endpoint>http://localhost</con:endpoint><con:endpoint>http://localhost:8080/</con:endpoint></con:endpoints><con:resource name="/banks" path="/banks" id="ded7f7ff-8a0a-4218-af60-8708c6c9020e"><con:settings/><con:parameters/><con:method name="get.banks" id="e173f2e1-736b-466f-bec7-785c2659a2c8" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ban="http://localhost/openbank/banks">ban:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="92db00f5-3483-4116-87c5-b02959b2b41b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/openbank/banks</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="add.bank" id="42c0f919-159c-46d7-996c-44a7a57074ae" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="e59e3304-e553-4306-b6ce-a51c5522401c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://giovannis-mbp.nz.ibm.com:8080/</con:endpoint><con:request>        {
            "id": "hsbc",
            "short_name": "HSBC",
            "full_name": "The Hongkong and Shanghai Banking Corporation Limited",
            "logo": "url of internet standard image",
            "website": "www.postbank.de"
        }</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/banks/{id}" path="/banks/{id}" id="8e4541b8-4528-4161-9489-e8e6bcc8e6d6"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="get.bank" id="9b690a22-9efd-4469-b09e-22fdbd4d0baf" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:bnz="http://giovannis-mbp.nz.ibm.com/banks/bnz">bnz:Response</con:element></con:representation><con:request name="Request 1" id="5e770eb8-c692-45f4-8944-b60a3d8e9aff" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://giovannis-mbp.nz.ibm.com:8080/</con:endpoint><con:request/><con:originalUri>http://giovannis-mbp.nz.ibm.com/banks/bnz</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/banks/{id}/accounts/{id}/transactions" path="/banks/{id}/accounts/{id}/transactions" id="55ee7cd2-d414-4dba-b4ee-1d8a5dde2d82"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="get.transactions" id="b9c02bca-3fb1-4fba-80bb-fe6302730c1f" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="dada51e1-6e54-44a6-9e3b-5f22920dd335" mediaType="application/json"><con:settings/><con:endpoint>http://giovannis-mbp.nz.ibm.com:8080/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="add.transaction" id="12365391-bde6-4e35-a283-39ba13d83e35" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="2d1a6f27-a46e-452d-8ec0-f6d6500748c4" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://giovannis-mbp.nz.ibm.com:8080/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/banks/{id}/accounts" path="/banks/{id}/accounts/{id}" id="83071963-5726-45ab-93cc-97233506e83d"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="get.account" id="db2a19c5-3b2d-4c34-9793-88e26043e358" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="7f994a7c-4baa-4983-9e13-6ee9aba73265" mediaType="application/json"><con:settings/><con:endpoint>http://giovannis-mbp.nz.ibm.com:8080/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/banks/{id}/accounts" path="/banks/{id}/accounts" id="b6859941-9724-4d24-8464-bc78c7bc9d3f"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="get.accounts" id="6179db6e-a833-481d-a943-90fd5d1c4621" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="3b80b066-34f5-49bf-93c3-b42416e9ba6b" mediaType="application/json"><con:settings/><con:endpoint>http://giovannis-mbp.nz.ibm.com:8080/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="add.account" id="469812f7-3374-42d5-bdcb-fa4850cdf8ee" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="18c63efc-1f90-41f4-93ea-2592a9571651" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://giovannis-mbp.nz.ibm.com:8080/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/banks/{id}/accounts/{id}/transactions/{id}" path="/banks/{id}/accounts/{id}/transactions/{id}" id="e4e089a3-e307-4c78-bfcf-c799f3abe818"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="get.transaction" id="1b338c47-c157-4601-8ac8-41dfbf90951a" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="98afa5b3-33c6-4464-adca-71a06c8b945f" mediaType="application/json"><con:settings/><con:endpoint>http://giovannis-mbp.nz.ibm.com:8080/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="73067ad7-bc54-426c-9ac8-797e073381c1" port="8080" path="/" host="localhost" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:restMockAction name="/banks" method="GET" resourcePath="/banks" id="91a1b672-5746-4fde-92bd-35e3a8d3d9bb"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="e50b1d77-4873-40fc-85e3-5490aa898385" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "banks": [
        {
            "bank_id": "hsbc",
            "short_name": "HSBC",
            "full_name": "The Hongkong and Shanghai Banking Corporation Limited",
            "logo": "url of internet standard image",
            "website": "www.postbank.de"
        },{
            "bank_id": "bnz",
            "short_name": "BNZ",
            "full_name": "The Bank of New Zealand",
            "logo": "url of internet standard image",
            "website": "www.postbank.de"
        }
    ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks" method="POST" resourcePath="/banks" id="4df741c7-4feb-4fc9-9ac6-137cea2ff1e4"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="ec2b3858-347a-41d7-b168-8d21a6980e19" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"bank": "account created succesfully"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks/{bank_id}" method="GET" resourcePath="/banks/{bank_id}" id="30973895-3088-4d32-a39f-e21e676f1865"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="0e5db746-5e90-4003-9319-f670fd3f89a3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
            "bank_id": "bnz",
            "short_name": "BNZ",
            "full_name": "The Bank of New Zealand",
            "logo": "url of internet standard image",
            "website": "www.postbank.de"
        }</con:responseContent><con:header><con:name>Content-Encoding</con:name><con:value>gzip</con:value></con:header><con:header><con:name>Server</con:name><con:value>Jetty(6.1.26)</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/banks/{bank_id}/accounts/{account_id}" method="GET" resourcePath="/banks/id/accounts/id" id="188f1789-e63e-4769-b7e5-8f68705c082e"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="f78e238d-096a-49c3-8549-b4514d229667" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "IBAN": "bnz001",
  "balance": 12300.20,
  "account_id": "savings01",
  "label": "savings",
  "owner": "Albert Jonson",
  "type": "savings"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks/{bank_id}/accounts" method="GET" resourcePath="/banks/id/accounts" id="22fda574-3a7c-4386-961f-735c55c72ab2"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="e940b22d-7cb6-46b4-b467-23f524e2312b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{ "accounts" : [
	{
  "IBAN": "bnz002",
  "balance": 300.20,
  "id": "straemline",
  "label": "main streamline",
  "owner": "Albert Jonson",
  "type": "streamline"
},
{
  "IBAN": "bnz003",
  "balance": 1200.30,
  "account_id": "visa",
  "label": "credit card",
  "owner": "Albert Jonson",
  "type": "credit"
},
{
  "IBAN": "bnz001",
  "balance": 12300.20,
  "account_id": "savings01",
  "label": "savings",
  "owner": "Albert Jonson",
  "type": "savings"
}
]}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks/{bank_id}/accounts" method="POST" resourcePath="/banks/id/accounts" id="9a47c41f-6190-490c-aa38-bfee9c60b244"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="293324ea-90cf-4a7c-9cbc-23121ef51b35" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"result": "account created succesfully"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks/{bank_id}/accounts/{account_id}/transactions" method="GET" resourcePath="/banks/id/accounts/id/transactions" id="ac82b939-1815-4c8d-a345-cf83f4c9e237"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="8eb27dfd-4ed4-45be-8532-951c196d0a9e" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{  
   "transactions":[  
      {  
         "transactions_id":"11",
         "this_account_id":"bnz01",
         "other_account_id":"asb02",
         "type":"cash",
         "description":"trademe purchase",
         "posted":"2016-06-07T00:00:00.001Z",
         "completed":"2012-03-07T00:00:00.001Z",
         "value_currency":"nzd",
         "value_amount":"90.85 ",
         "where_lat":"111.11111",
         "where_lon":"22.11111"
      },
      {  
         "transactions_id":"12",
         "this_account_id":"bnz01",
         "other_account_id":"anz04",
         "type":"credit",
         "description":"school donation",
         "posted":"2016-06-07T00:00:00.001Z",
         "completed":"2012-03-07T00:00:00.001Z",
         "value_currency":"nzd",
         "value_amount":"104.45 ",
         "where_lat":"111.11111",
         "where_lon":"22.11111"
      },
      {  
         "transactions_id":"13",
         "this_account_id":"bnz01",
         "other_account_id":"tsb02",
         "type":"stramline",
         "description":"greenpeace subscruption",
         "posted":"2016-06-07T00:00:00.001Z",
         "completed":"2012-03-07T00:00:00.001Z",
         "value_currency":"nzd",
         "value_amount":"60.00 ",
         "where_lat":"111.11111",
         "where_lon":"22.11111"
      }
   ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks/{bank_id}/accounts/{account_id}/transactions" method="POST" resourcePath="/banks/id/accounts/id/transactions" id="10103079-f497-48b6-9c73-3bb5482733cb"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="73629e48-7214-4e26-ba6b-189d252729fa" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"transactions": "account created succesfully"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks/{bank_id}/accounts/{account_id}/transactions/{transaction_id}" method="GET" resourcePath="/banks/id/accounts/id/transactions/id" id="c22a95f0-e9dc-4a10-b33b-81a53fe4a524"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="2190c7dd-10ea-4c3e-8741-bac097fe76ae" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{  
   "transactions_id":"11",
   "this_account_id":"thisaccid",
   "other_account_id":"otheraccid",
   "type":"cash",
   "description":"some description",
   "posted":"2012-03-07T00:00:00.001Z",
   "completed":"2012-03-07T00:00:00.001Z",
   "value_currency":"nzd",
   "value_amount":"10.45 ",
   "where_lat":"111.11111",
   "where_lon":"22.11111"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks/bnz" method="GET" resourcePath="/banks/bnz" id="d9a6fb3c-03f4-46af-aecc-4fbad87dee86"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="8705274f-d652-4ced-a6cf-5112019be2b4" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
            "bank_id": "bnz",
            "short_name": "BNZ",
            "full_name": "The Bank of New Zealand",
            "logo": "url of internet standard image",
            "website": "www.postbank.de"
        }</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks/bnz/accounts" method="GET" resourcePath="/banks/bnz/accounts" id="51f8fdd9-f027-4b81-9b2f-54ebbd9a079c"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="0f176625-79fc-4d10-adc4-2efcbfccad91" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{ "accounts" : [
	{
  "IBAN": "bnz002",
  "balance": 300.20,
  "id": "straemline",
  "label": "main streamline",
  "owner": "Albert Jonson",
  "type": "streamline"
},
{
  "IBAN": "bnz003",
  "balance": 1200.30,
  "account_id": "visa",
  "label": "credit card",
  "owner": "Albert Jonson",
  "type": "credit"
},
{
  "IBAN": "bnz001",
  "balance": 12300.20,
  "account_id": "savings01",
  "label": "savings",
  "owner": "Albert Jonson",
  "type": "savings"
}
]}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks/bnz/accounts" method="POST" resourcePath="/banks/bnz/accounts" id="0f4f4368-5519-44c9-9a2b-82e5b9b13e53"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="17ebc3c1-1875-410b-abbf-8891469eb3b3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"result": "account created succesfully"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks/bnz/accounts/bnz01" method="GET" resourcePath="/banks/bnz/accounts/bnz01" id="758a2db8-2962-439e-8272-a189bbd6f1e4"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="0c2ac562-7cf6-4a3d-aac1-91e00aa6ed67" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "IBAN": "bnz001",
  "balance": 12300.20,
  "account_id": "savings01",
  "label": "savings",
  "owner": "Albert Jonson",
  "type": "savings"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks/bnz/accounts/bnz01/transactions" method="GET" resourcePath="/banks/bnz/accounts/bnz01/transactions" id="074036db-2174-4348-947b-c5f0c4b8a4d9"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1f2446dc-6c68-42e3-bb82-80e6999091a8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{  
   "transactions":[  
      {  
         "transactions_id":"11",
         "this_account_id":"bnz01",
         "other_account_id":"asb02",
         "type":"cash",
         "description":"trademe purchase",
         "posted":"2016-06-07T00:00:00.001Z",
         "completed":"2012-03-07T00:00:00.001Z",
         "value_currency":"nzd",
         "value_amount":"90.85 ",
         "where_lat":"111.11111",
         "where_lon":"22.11111"
      },
      {  
         "transactions_id":"12",
         "this_account_id":"bnz01",
         "other_account_id":"anz04",
         "type":"credit",
         "description":"school donation",
         "posted":"2016-06-07T00:00:00.001Z",
         "completed":"2012-03-07T00:00:00.001Z",
         "value_currency":"nzd",
         "value_amount":"104.45 ",
         "where_lat":"111.11111",
         "where_lon":"22.11111"
      },
      {  
         "transactions_id":"13",
         "this_account_id":"bnz01",
         "other_account_id":"tsb02",
         "type":"stramline",
         "description":"greenpeace subscruption",
         "posted":"2016-06-07T00:00:00.001Z",
         "completed":"2012-03-07T00:00:00.001Z",
         "value_currency":"nzd",
         "value_amount":"60.00 ",
         "where_lat":"111.11111",
         "where_lon":"22.11111"
      }
   ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks/bnz/accounts/bnz01/transactions" method="POST" resourcePath="/banks/bnz/accounts/bnz01/transactions" id="7ec59b2b-0974-4b4a-bc7d-e29c663bf02f"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="577143c4-29d9-4d5f-9e7b-55dccf0b321b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"transactions": "account created succesfully"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/banks/bnz/accounts/bnz01/transactions/11" method="GET" resourcePath="/banks/bnz/accounts/bnz01/transactions/11" id="9f17ca7f-1e5b-4fdc-a5d4-3daf32b0b52a"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="ff6c9b54-24ee-4a8c-a412-0ce11bdf0738" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{  
   "transactions_id":"11",
   "this_account_id":"thisaccid",
   "other_account_id":"otheraccid",
   "type":"cash",
   "description":"some description",
   "posted":"2012-03-07T00:00:00.001Z",
   "completed":"2012-03-07T00:00:00.001Z",
   "value_currency":"nzd",
   "value_amount":"10.45 ",
   "where_lat":"111.11111",
   "where_lon":"22.11111"
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/></con:soapui-project>